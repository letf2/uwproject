_a = [1, 4, 7, 14, 17, 24, 33, 50, 53, 60, 69, 86, 99, 116, 141, 184, 189, 196, 205, 222, 235, 252, 277, 320, 343, 360, 385, 428, 471, 518, 585, 696, 715, 724, 733, 750, 763, 780, 805, 848, 871, 888, 913, 956, 999, 1046, 1113, 1224, 1277, 1296, 1321, 1364, 1407, 1454, 1521, 1632, 1721, 1778, 1845, 1956, 2085, 2222, 2403, 2692, 2775, 2802, 2813, 2830, 2843, 2860, 2885, 2928, 2951, 2968, 2993, 3036, 3079, 3126, 3193, 3304, 3357, 3376, 3401, 3444, 3487, 3534, 3601, 3712, 3801, 3858, 3925, 4036, 4165, 4302, 4483, 4772, 4921, 4958, 4985, 5028, 5071, 5118, 5185, 5296, 5385, 5442, 5509, 5620, 5749, 5886, 6067, 6356, 6573, 6664, 6733, 6844, 6973, 7110, 7291, 7580, 7869, 8072, 8263, 8552, 8921, 9324, 9823, 10582, 10907, 11034, 11067, 11086, 11099, 11116, 11141, 11184, 11207, 11224, 11249, 11292, 11335, 11382, 11449, 11560, 11613, 11632, 11657, 11700, 11743, 11790, 11857, 11968, 12057, 12114, 12181, 12292, 12421, 12558, 12739, 13028, 13177, 13214, 13241, 13284, 13327, 13374, 13441, 13552, 13641, 13698, 13765, 13876, 14005, 14142, 14323, 14612, 14829, 14920, 14989, 15100, 15229, 15366, 15547, 15836, 16125, 16328, 16519, 16808, 17177, 17580, 18079, 18838, 19293, 19430, 19479, 19524, 19567, 19614, 19681, 19792, 19881, 19938, 20005, 20116, 20245, 20382, 20563, 20852, 21069, 21160, 21229, 21340, 21469, 21606, 21787, 22076, 22365, 22568, 22759, 23048, 23417, 23820, 24319, 25078, 25665, 25888, 25979, 26092, 26221, 26358, 26539, 26828, 27117, 27320, 27511, 27800, 28169, 28572, 29071, 29830, 30553, 30952, 31181, 31472, 31841, 32244, 32743, 33502, 34369, 35064, 35649, 36418, 37445, 38620, 40021, 42038, 43189, 43758, 43935, 43980, 43995, 44012, 44037, 44080, 44103, 44120, 44145, 44188, 44231, 44278, 44345, 44456, 44509, 44528, 44553, 44596, 44639, 44686, 44753, 44864, 44953, 45010, 45077, 45188, 45317, 45454, 45635, 45924, 46073, 46110, 46137, 46180, 46223, 46270, 46337, 46448, 46537, 46594, 46661, 46772, 46901, 47038, 47219, 47508, 47725, 47816, 47885, 47996, 48125, 48262, 48443, 48732, 49021, 49224, 49415, 49704, 50073, 50476, 50975, 51734, 52189, 52326, 52375, 52420, 52463, 52510, 52577, 52688, 52777, 52834, 52901, 53012, 53141, 53278, 53459, 53748, 53965, 54056, 54125, 54236, 54365, 54502, 54683, 54972, 55261, 55464, 55655, 55944, 56313, 56716, 57215, 57974, 58561, 58784, 58875, 58988, 59117, 59254, 59435, 59724, 60013, 60216, 60407, 60696, 61065, 61468, 61967, 62726, 63449, 63848, 64077, 64368, 64737, 65140, 65639, 66398, 67265, 67960, 68545, 69314, 70341, 71516, 72917, 74934, 76343, 76922, 77115, 77186, 77231, 77278, 77345, 77456, 77545, 77602, 77669, 77780, 77909, 78046, 78227, 78516, 78733, 78824, 78893, 79004, 79133, 79270, 79451, 79740, 80029, 80232, 80423, 80712, 81081, 81484, 81983, 82742, 83329, 83552, 83643, 83756, 83885, 84022, 84203, 84492, 84781, 84984, 85175, 85464, 85833, 86236, 86735, 87494, 88217, 88616, 88845, 89136, 89505, 89908, 90407, 91166, 92033, 92728, 93313, 94082, 95109, 96284, 97685, 99702, 101371, 102100, 102335, 102474, 102605, 102742, 102923, 103212, 103501, 103704, 103895, 104184, 104553, 104956, 105455, 106214, 106937, 107336, 107565, 107856, 108225, 108628, 109127, 109886, 110753, 111448, 112033, 112802, 113829, 115004, 116405, 118422, 120355, 121388, 121793, 122110, 122481, 122884, 123383, 124142, 125009, 125704, 126289, 127058, 128085, 129260, 130661, 132678, 134883, 136404, 137261, 138072, 139101, 140276, 141677, 143694, 146187, 148444, 150309, 152432, 155255, 158632, 162609, 168044, 171849, 174128, 175035, 175276, 175321, 175340, 175365, 175408, 175431, 175448, 175473, 175516, 175559, 175606, 175673, 175784, 175837, 175856, 175881, 175924, 175967, 176014, 176081, 176192, 176281, 176338, 176405, 176516, 176645, 176782, 176963, 177252, 177401, 177438, 177465, 177508, 177551, 177598, 177665, 177776, 177865, 177922, 177989, 178100, 178229, 178366, 178547, 178836, 179053, 179144, 179213, 179324, 179453, 179590, 179771, 180060, 180349, 180552, 180743, 181032, 181401, 181804, 182303, 183062, 183517, 183654, 183703, 183748, 183791, 183838, 183905, 184016, 184105, 184162, 184229, 184340, 184469, 184606, 184787, 185076, 185293, 185384, 185453, 185564, 185693, 185830, 186011, 186300, 186589, 186792, 186983, 187272, 187641, 188044, 188543, 189302, 189889, 190112, 190203, 190316, 190445, 190582, 190763, 191052, 191341, 191544, 191735, 192024, 192393, 192796, 193295, 194054, 194777, 195176, 195405, 195696, 196065, 196468, 196967, 197726, 198593, 199288, 199873, 200642, 201669, 202844, 204245, 206262, 207671, 208250, 208443, 208514, 208559, 208606, 208673, 208784, 208873, 208930, 208997, 209108, 209237, 209374, 209555, 209844, 210061, 210152, 210221, 210332, 210461, 210598, 210779, 211068, 211357, 211560, 211751, 212040, 212409, 212812, 213311, 214070, 214657, 214880, 214971, 215084, 215213, 215350, 215531, 215820, 216109, 216312, 216503, 216792, 217161, 217564, 218063, 218822, 219545, 219944, 220173, 220464, 220833, 221236, 221735, 222494, 223361, 224056, 224641, 225410, 226437, 227612, 229013, 231030, 232699, 233428, 233663, 233802, 233933, 234070, 234251, 234540, 234829, 235032, 235223, 235512, 235881, 236284, 236783, 237542, 238265, 238664, 238893, 239184, 239553, 239956, 240455, 241214, 242081, 242776, 243361, 244130, 245157, 246332, 247733, 249750, 251683, 252716, 253121, 253438, 253809, 254212, 254711, 255470, 256337, 257032, 257617, 258386, 259413, 260588, 261989, 264006, 266211, 267732, 268589, 269400, 270429, 271604, 273005, 275022, 277515, 279772, 281637, 283760, 286583, 289960, 293937, 299372, 303691, 305980, 306903, 307170, 307245, 307294, 307361, 307472, 307561, 307618, 307685, 307796, 307925, 308062, 308243, 308532, 308749, 308840, 308909, 309020, 309149, 309286, 309467, 309756, 310045, 310248, 310439, 310728, 311097, 311500, 311999, 312758, 313345, 313568, 313659, 313772, 313901, 314038, 314219, 314508, 314797, 315000, 315191, 315480, 315849, 316252, 316751, 317510, 318233, 318632, 318861, 319152, 319521, 319924, 320423, 321182, 322049, 322744, 323329, 324098, 325125, 326300, 327701, 329718, 331387, 332116, 332351, 332490, 332621, 332758, 332939, 333228, 333517, 333720, 333911, 334200, 334569, 334972, 335471, 336230, 336953, 337352, 337581, 337872, 338241, 338644, 339143, 339902, 340769, 341464, 342049, 342818, 343845, 345020, 346421, 348438, 350371, 351404, 351809, 352126, 352497, 352900, 353399, 354158, 355025, 355720, 356305, 357074, 358101, 359276, 360677, 362694, 364899, 366420, 367277, 368088, 369117, 370292, 371693, 373710, 376203, 378460, 380325, 382448, 385271, 388648, 392625, 398060, 402895, 405462, 406427, 406762, 406923, 407062, 407243, 407532, 407821, 408024, 408215, 408504, 408873, 409276, 409775, 410534, 411257, 411656, 411885, 412176, 412545, 412948, 413447, 414206, 415073, 415768, 416353, 417122, 418149, 419324, 420725, 422742, 424675, 425708, 426113, 426430, 426801, 427204, 427703, 428462, 429329, 430024, 430609, 431378, 432405, 433580, 434981, 436998, 439203, 440724, 441581, 442392, 443421, 444596, 445997, 448014, 450507, 452764, 454629, 456752, 459575, 462952, 466929, 472364, 477719, 480846, 482045, 482558, 482959, 483364, 483863, 484622, 485489, 486184, 486769, 487538, 488565, 489740, 491141, 493158, 495363, 496884, 497741, 498552, 499581, 500756, 502157, 504174, 506667, 508924, 510789, 512912, 515735, 519112, 523089, 528524, 534407, 538406, 540249, 541288, 542347, 543524, 544925, 546942, 549435, 551692, 553557, 555680, 558503, 561880, 565857, 571292, 577719, 582966, 586201, 588680, 591549, 594928, 598905, 604340, 611343, 618350, 624337, 630448, 638217, 647794, 659125, 673972]
_a = _a[ : 64]  #artifically restrict access to i. 
a = lambda i : _a[i - 1] if i >= 1 else 0



class Memoize:
    def __init__(self, f):
        self.f = f
        self.memo = {}
    def __call__(self, *args):
        if not args in self.memo:
            self.memo[args] = self.f(*args)

        return self.memo[args]



def smallest_pow2_geq(i):
    return (i - 1).bit_length()


def greatest_pow2_leq(i):
    return smallest_pow2_geq(i) - 1 if i != 1 else 1


def c(i):
    if i == 0:
        return 0
    
    g = smallest_pow2_geq(i)
    return a(2 ** g + i) - a(2 ** g + max(g - 3, 0)) + c(max(g - 3, 0))


"""
def a_caged(k, n):
    if n <= 2 ** k:
        return a(n)
    else:
        return a(min(n, 2 ** k + max(k - 3, 0))) - c(min(n - 2 ** k, max(k - 3, 0)))
"""


@Memoize
def w(k, n):
    g = 2 ** (k - 1)
    return (a_caged(k, g + n) - a_caged(k - 1, g + n) - a_caged(k - 1, n)) // 2


@Memoize
def a_caged(k, n):
    if k <= 3:
        if n <= 2 ** k:
            return a(n)
        else:
            return a(min(n, 2 ** k + max(k - 3, 0))) - c(min(n - 2 ** k, max(k - 3, 0)))
        
    #n = 2^x + y
    x = k - 1
    y = n - 2 ** x
    y2 = y - 2 ** (x - 1)
    y3 = y2 - 1
    #print(k, n, x, y, y2, y3)
    return a_caged(k - 1, n) + 2 * w(k - 1, y) + a_caged(k - 1, y) + (2 ** (k - 1) - 2 if y > 2 ** (x - 1) else 0) + 4 * w(k - 1, y2) + 2 * w(k - 1, y3) - ((2 ** x) if n > 2 ** k else 0)







