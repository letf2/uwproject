#0 terms to fix indexing
a = [0, 1, 4, 7, 16, 19, 28, 37, 58, 67, 76, 85, 106, 121, 142, 169, 220, 247, 256, 265, 286, 301, 322, 349, 400, 433, 454, 481, 532, 583, 640, 709, 826, 907, 928, 937, 958, 973, 994, 1021, 1072, 1105, 1126, 1153, 1204, 1255, 1312, 1381, 1498, 1585, 1618, 1645, 1696, 1747, 1804, 1879, 2008, 2125, 2200, 2269, 2386, 2521, 2662, 2833, 3112, 3343, 3412, 3421, 3442, 3457, 3478, 3505, 3556, 3589, 3610, 3637, 3688, 3739, 3796, 3865, 3982, 4069, 4102, 4129, 4180, 4231, 4288, 4363, 4492, 4609, 4684, 4753, 4870, 5005, 5146, 5317, 5596, 5833, 5914, 5941, 5992, 6043, 6100, 6175, 6304, 6421, 6496, 6571, 6700, 6853, 7018, 7213, 7516, 7807, 7960, 8041, 8158, 8293, 8434, 8617, 8920, 9229, 9430, 9601, 9880, 10231, 10600, 11029, 11686, 12307, 12556, 12589, 12610, 12625, 12646, 12673, 12724, 12757, 12778, 12805, 12856, 12907, 12964, 13033, 13150, 13237, 13270, 13297, 13348, 13399, 13456, 13531, 13660, 13777, 13852, 13921, 14038, 14173, 14314, 14485, 14764, 15001, 15082, 15109, 15160, 15211, 15268, 15343, 15472, 15589, 15664, 15739, 15868, 16021, 16186, 16381, 16684, 16975, 17128, 17209, 17326, 17461, 17602, 17785, 18088, 18397, 18598, 18769, 19048, 19399, 19768, 20197, 20854, 21481, 21742, 21793, 21844, 21895, 21952, 22027, 22156, 22273, 22348, 22423, 22552, 22705, 22870, 23065, 23368, 23659, 23812, 23899, 24028, 24181, 24346, 24553, 24886, 25249, 25516, 25729, 26032, 26419, 26836, 27319, 28048, 28801, 29200, 29329, 29446, 29581, 29722, 29905, 30208, 30517, 30718, 30901, 31204, 31591, 32008, 32485, 33190, 33937, 34378, 34597, 34876, 35227, 35596, 36055, 36784, 37609, 38212, 38677, 39334, 40201, 41134, 42193, 43756, 45391, 46216, 46369, 46390, 46405, 46426, 46453, 46504, 46537, 46558, 46585, 46636, 46687, 46744, 46813, 46930, 47017, 47050, 47077, 47128, 47179, 47236, 47311, 47440, 47557, 47632, 47701, 47818, 47953, 48094, 48265, 48544, 48781, 48862, 48889, 48940, 48991, 49048, 49123, 49252, 49369, 49444, 49519, 49648, 49801, 49966, 50161, 50464, 50755, 50908, 50989, 51106, 51241, 51382, 51565, 51868, 52177, 52378, 52549, 52828, 53179, 53548, 53977, 54634, 55261, 55522, 55573, 55624, 55675, 55732, 55807, 55936, 56053, 56128, 56203, 56332, 56485, 56650, 56845, 57148, 57439, 57592, 57679, 57808, 57961, 58126, 58333, 58666, 59029, 59296, 59509, 59812, 60199, 60616, 61099, 61828, 62581, 62980, 63109, 63226, 63361, 63502, 63685, 63988, 64297, 64498, 64681, 64984, 65371, 65788, 66265, 66970, 67717, 68158, 68377, 68656, 69007, 69376, 69835, 70564, 71389, 71992, 72457, 73114, 73981, 74914, 75973, 77536, 79177, 80014, 80185, 80236, 80287, 80344, 80419, 80548, 80665, 80740, 80815, 80944, 81097, 81262, 81457, 81760, 82051, 82204, 82291, 82420, 82573, 82738, 82945, 83278, 83641, 83908, 84121, 84424, 84811, 85228, 85711, 86440, 87193, 87592, 87727, 87856, 88009, 88174, 88381, 88714, 89077, 89344, 89569, 89902, 90337, 90820, 91375, 92176, 93061, 93658, 93973, 94288, 94675, 95092, 95599, 96388, 97309, 98020, 98563, 99292, 100273, 101362, 102589, 104332, 106243, 107392, 107749, 107890, 108025, 108166, 108349, 108652, 108961, 109162, 109345, 109648, 110035, 110452, 110929, 111634, 112381, 112822, 113053, 113356, 113743, 114160, 114667, 115456, 116389, 117124, 117673, 118378, 119317, 120346, 121513, 123220, 125125, 126274, 126661, 126940, 127291, 127660, 128119, 128848, 129673, 130276, 130771, 131500, 132481, 133570, 134797, 136528, 138511, 139888, 140593, 141274, 142141, 143074, 144193, 145912, 147985, 149626, 150841, 152404, 154543, 156928, 159589, 163330]
i = [0, 1, 2, 3, 5, 6, 8, 10, 13, 14, 16, 18, 22, 25, 28, 31, 37, 40, 42, 44, 48, 51, 55, 60, 69, 75, 78, 81, 87, 92, 98, 106, 119, 126, 128, 130, 134, 137, 141, 146, 155, 161, 165, 170, 179, 188, 198, 210, 230, 245, 250, 253, 259, 264, 270, 278, 291, 300, 306, 314, 328, 343, 358, 375, 403, 424, 430, 432, 436, 439, 443, 448, 457, 463, 467, 472, 481, 490, 500, 512, 532, 547, 553, 558, 567, 576, 586, 599, 621, 641, 654, 666, 686, 709, 733, 762, 809, 849, 862, 865, 871, 876, 882, 890, 903, 912, 918, 926, 940, 955, 970, 987, 1015, 1038, 1048, 1056, 1070, 1085, 1101, 1122, 1157, 1191, 1212, 1229, 1257, 1290, 1324, 1366, 1433, 1490, 1508, 1510, 1514, 1517, 1521, 1526, 1535, 1541, 1545, 1550, 1559, 1568, 1578, 1590, 1610, 1625, 1631, 1636, 1645, 1654, 1664, 1677, 1699, 1719, 1732, 1744, 1764, 1787, 1811, 1840, 1887, 1927, 1941, 1946, 1955, 1964, 1974, 1987, 2009, 2029, 2042, 2055, 2077, 2103, 2131, 2164, 2215, 2264, 2290, 2304, 2324, 2347, 2371, 2402, 2453, 2505, 2539, 2568, 2615, 2674, 2736, 2808, 2918, 3023, 3066, 3073, 3079, 3084, 3090, 3098, 3111, 3120, 3126, 3134, 3148, 3163, 3178, 3195, 3223, 3246, 3256, 3264, 3278, 3293, 3309, 3330, 3365, 3399, 3420, 3437, 3465, 3498, 3532, 3574, 3641, 3700, 3722, 3730, 3744, 3759, 3775, 3796, 3831, 3865, 3887, 3908, 3943, 3986, 4032, 4086, 4168, 4251, 4296, 4317, 4345, 4378, 4412, 4456, 4527, 4600, 4648, 4690, 4758, 4845, 4936, 5039, 5193, 5344, 5410, 5420, 5424, 5427, 5431, 5436, 5445, 5451, 5455, 5460, 5469, 5478, 5488, 5500, 5520, 5535, 5541, 5546, 5555, 5564, 5574, 5587, 5609]

#building materials
tss = lambda x : 0 if x <= 0 else (a[x] + 3 * x - 1) // 3  #two sided slice
ls = lambda x : 0 if x <= 0 else (a[x] + 3 * x + 2) // 6  #leftside 

#-> ls(x) = (tss(x) + 1) / 2


def largest_pow2_leq(x):
    return x.bit_length() - 1


def smallest_pow2_geq(x):
    return (x - 1).bit_length()


def cg_from_k(k):
    return 2 ** k + max((k - 1) // 2, 0)


def tssc(x):
    #tssc(4) = tss(8) - tss(4)
    #tssc(6) = tss(14) - tss(9) + tssc(1)
    if x <= 0:
        return 0

    k = smallest_pow2_geq(x)
    p = 2 ** k
    cg = cg_from_k(k)
    rem = cg - p
    
    return tss(x + p) - tss(cg) + tssc(rem)


def ls_caged(k, x):
    if x <= 0:
        return 0
    
    p = 2 ** k
    cg = cg_from_k(k)
    x = min(x, cg)
    return ls(x) - lsc(x - p)


def tss_caged(k, x):
    if x <= 0:
        return 0
    
    p = 2 ** k
    cg = cg_from_k(k)
    x = min(x, cg)
    return tss(x) - tssc(x - p)


def lsc(x):
    if x <= 0:
        return 0
    
    k = smallest_pow2_geq(x)
    p = 2 ** k
    cg = cg_from_k(k)
    rem = cg - p
    
    return ls(x + p) - ls(cg) + lsc(rem)


def cgi_from_k(k):
    return 2 ** k + max((k - 2) // 2, 0)


def i_caged(k, x):
    if x <= 0:
        return 0
    
    cg = cgi_from_k(k)
    x = min(x, cg)
    rem = x - (2 ** k)

    return i[x] - lsc(rem)


def si_caged(k, x):
    cg = cgi_from_k(k)
    return i_caged(k, x) - min(max(0, x), 2 ** k)


def tss_caged_from_i(k, x):
    x = min(x, cg_from_k(k))
    p = 2 ** (k - 1)
    rem = x - p
    return tss_caged(k - 1, x) + 2 * (tss_caged(k - 1, rem) + si_caged(k - 1, rem - 1))


def c_caged(k, x):
    x = min(x, cgi_from_k(k))
    
    if x <= 0:
        return 0
    elif x <= 8:
        return ([0, 1, 2, 3, 5, 6, 8, 10, 13])[x]

    p = 2 ** (k - 1)
    corner_rem = x - p
    component_rem = corner_rem - 2 ** (k - 2)
    
    return c_caged(k - 1, x) + tss_caged(k - 1, corner_rem) + si_caged(k - 2, corner_rem - 1) - tss_caged(k - 2, component_rem) + c_caged(k - 2, component_rem)


def i_test(k, x):
    cg = cgi_from_k(k)
    x = min(x, cg)
    
    if x <= 0:
        return 0
    elif x <= 8:
        return i_caged(k, x)

    p = 2 ** (k - 1)
    rem = x - p

    ls_rem = 2 ** (k - 2) + rem
    component_rem = rem - 2 ** (k - 2)

    ls_crem = 2 ** (k - 2) + component_rem
    
    return i_test(k - 1, x) + ls_caged(k - 1, ls_rem) - ls_caged(k - 2, ls_rem) + ls_caged(k - 1, ls_crem) - ls_caged(k - 2, ls_crem) + (c_caged(k - 2, component_rem - 1) + (component_rem > 0)) + si_caged(k - 2, component_rem) - (x > 2 ** k)
    
    
    













    
