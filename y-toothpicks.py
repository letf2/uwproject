a = [0, 1, 4, 7, 16, 19, 28, 37, 58, 67, 76, 85, 106, 121, 142, 169, 220, 247, 256, 265, 286, 301, 322, 349, 400, 433, 454, 481, 532, 583, 640, 709, 826, 907, 928, 937, 958, 973, 994, 1021, 1072, 1105, 1126, 1153, 1204, 1255, 1312, 1381, 1498, 1585, 1618, 1645, 1696, 1747, 1804, 1879, 2008, 2125, 2200, 2269, 2386, 2521, 2662, 2833, 3112, 3343, 3412, 3421, 3442, 3457, 3478, 3505, 3556, 3589, 3610, 3637, 3688, 3739, 3796, 3865, 3982, 4069, 4102, 4129, 4180, 4231, 4288, 4363, 4492, 4609, 4684, 4753, 4870, 5005, 5146, 5317, 5596, 5833, 5914, 5941, 5992, 6043, 6100, 6175, 6304, 6421, 6496, 6571, 6700, 6853, 7018, 7213, 7516, 7807, 7960, 8041, 8158, 8293, 8434, 8617, 8920, 9229, 9430, 9601, 9880, 10231, 10600, 11029, 11686, 12307, 12556, 12589, 12610, 12625, 12646, 12673, 12724, 12757, 12778, 12805, 12856, 12907, 12964, 13033, 13150, 13237, 13270, 13297, 13348, 13399, 13456, 13531, 13660, 13777, 13852, 13921, 14038, 14173, 14314, 14485, 14764, 15001, 15082, 15109, 15160, 15211, 15268, 15343, 15472, 15589, 15664, 15739, 15868, 16021, 16186, 16381, 16684, 16975, 17128, 17209, 17326, 17461, 17602, 17785, 18088, 18397, 18598, 18769, 19048, 19399, 19768, 20197, 20854, 21481, 21742, 21793, 21844, 21895, 21952, 22027, 22156, 22273, 22348, 22423, 22552, 22705, 22870, 23065, 23368, 23659, 23812, 23899, 24028, 24181, 24346, 24553, 24886, 25249, 25516, 25729, 26032, 26419, 26836, 27319, 28048, 28801, 29200, 29329, 29446, 29581, 29722, 29905, 30208, 30517, 30718, 30901, 31204, 31591, 32008, 32485, 33190, 33937, 34378, 34597, 34876, 35227, 35596, 36055, 36784, 37609, 38212, 38677, 39334, 40201, 41134, 42193, 43756, 45391, 46216, 46369, 46390, 46405, 46426, 46453, 46504, 46537, 46558, 46585, 46636, 46687, 46744, 46813, 46930, 47017, 47050, 47077, 47128, 47179, 47236, 47311, 47440, 47557, 47632, 47701, 47818, 47953, 48094, 48265, 48544, 48781, 48862, 48889, 48940, 48991, 49048, 49123, 49252, 49369, 49444, 49519, 49648, 49801, 49966, 50161, 50464, 50755, 50908, 50989, 51106, 51241, 51382, 51565, 51868, 52177, 52378, 52549, 52828, 53179, 53548, 53977, 54634, 55261, 55522, 55573, 55624, 55675, 55732, 55807, 55936, 56053, 56128, 56203, 56332, 56485, 56650, 56845, 57148, 57439, 57592, 57679, 57808, 57961, 58126, 58333, 58666, 59029, 59296, 59509, 59812, 60199, 60616, 61099, 61828, 62581, 62980, 63109, 63226, 63361, 63502, 63685, 63988, 64297, 64498, 64681, 64984, 65371, 65788, 66265, 66970, 67717, 68158, 68377, 68656, 69007, 69376, 69835, 70564, 71389, 71992, 72457, 73114, 73981, 74914, 75973, 77536, 79177, 80014, 80185, 80236, 80287, 80344, 80419, 80548, 80665, 80740, 80815, 80944, 81097, 81262, 81457, 81760, 82051, 82204, 82291, 82420, 82573, 82738, 82945, 83278, 83641, 83908, 84121, 84424, 84811, 85228, 85711, 86440, 87193, 87592, 87727, 87856, 88009, 88174, 88381, 88714, 89077, 89344, 89569, 89902, 90337, 90820, 91375, 92176, 93061, 93658, 93973, 94288, 94675, 95092, 95599, 96388, 97309, 98020, 98563, 99292, 100273, 101362, 102589, 104332, 106243, 107392, 107749, 107890, 108025, 108166, 108349, 108652, 108961, 109162, 109345, 109648, 110035, 110452, 110929, 111634, 112381, 112822, 113053, 113356, 113743, 114160, 114667, 115456, 116389, 117124, 117673, 118378, 119317, 120346, 121513, 123220, 125125, 126274, 126661, 126940, 127291, 127660, 128119, 128848, 129673, 130276, 130771, 131500, 132481, 133570, 134797, 136528, 138511, 139888, 140593, 141274, 142141, 143074, 144193, 145912, 147985, 149626, 150841, 152404, 154543, 156928, 159589, 163330]
s = lambda x : 0 if x <= 0 else (a[x] + 3 * x - 1) // 3  #two sided slice
s2a = lambda y, x : 3 * (y - x) + 1 
    

def smallest_pow2_geq(x):
    return (x - 1).bit_length()


def cg_from_k(k):
    return 2 ** k + max((k - 1) // 2, 0)


def sc(x):
    #if using non-reccurent version,
    #512 initial terms ~ 2^1024 A(n) terms 
    
    #tssc(4) = tss(8) - tss(4)
    #tssc(6) = tss(14) - tss(9) + tssc(1)
    if x <= 0:
        return 0

    k = smallest_pow2_geq(x)
    p = 2 ** k
    cg = cg_from_k(k)

    return s_caged(k + 1, p + x) - s_caged(k, cg)


def s_caged(k, i):
    #find S(k + 1, 2^k + i)
    #respectively,
    #prev slice
    #copies of prev slice
    #interior of prev slice
    #s_caged(k-1,i-2**(k-1)-2**(k-2)-1) - s_caged(k-2, i-2**(k-1)-2**(k-2)-1)-2*max(0,min(i-2**(k-2)-2**(k-1)-1, 2**(k-2)))
    p = 2 ** k
    cg = cg_from_k(k)
    i = min(i, cg)
    
    if i <= 16:
        if i <= 0:
            return 0
        #print(k,i,p,cg)
        return s(i) - sc(i - p)

    i -= 2**(k-1)
    k -= 1
    
    return s_caged(k, 2**k + i) + \
           2*s_caged(k, i) + \
           s_caged(k, 2**(k-1) + i) - s_caged(k-1, 2**(k-1) + i) - 2*s_caged(k-1,i) + \
           s_caged(k-1,i-2**(k-2)-1) - s_caged(k-2, i-2**(k-2)-1) - 2*max(0,min(i-2**(k-1)-1, 2**(k-2))) + \
           s_caged(k-1,i-2**(k-1)-1) - s_caged(k-2, i-2**(k-1)-1) - 2*max(0,min(i-2**(k-1)-2**(k-2)-1, 2**(k-2))) + \
           s_caged(k-1, i - 2**(k-1)) - s_caged(k-2, i - 2**(k-1)) - 2*s_caged(k-2,i - 2**(k-1) - 2**(k-2)) + \
           s_caged(k-1, i - 2**(k-1) - 1) - s_caged(k-2, i - 2**(k-1) - 1) - 2*s_caged(k-2,i - 2**(k-1) - 2**(k-2) - 1) + \
           2*max(min(i - 2**(k-1) - 2**(k-2) - 1, 2**(k-2)), 0)

#indicates
#s(k+1) = 4s(k) + s(k-1) - 8s(k-2) - 2^(k-1) with s(0)=1, s(1)=3, s(2)=9
        
k = 5
for i in range(2**k + 4):
    print(f"{i} : {s_caged(k,i)}")






















